#!/bin/bash
# Script de d√©ploiement Matrix - Mission D.I.P. - VERSION CORRIG√âE

set -e

echo "üõ°Ô∏è === D√âPLOIEMENT MATRIX SYNAPSE - MISSION D.I.P. ==="

# Variables
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$(dirname "$SCRIPT_DIR")")"
MATRIX_DATA="$PROJECT_ROOT/data/matrix"

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonctions
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_step() {
    echo -e "${BLUE}[√âTAPE]${NC} $1"
}

# V√©rifications pr√©alables
check_requirements() {
    log_step "V√©rification des pr√©requis..."
    
    if ! command -v docker &> /dev/null; then
        log_error "Docker n'est pas install√©"
        exit 1
    fi
    
    # V√©rifier Docker Compose (nouvelle ou ancienne syntaxe)
    if command -v docker-compose &> /dev/null; then
        COMPOSE_CMD="docker-compose"
    elif docker compose version &> /dev/null 2>&1; then
        COMPOSE_CMD="docker compose"
    else
        log_error "Docker Compose n'est pas install√©"
        exit 1
    fi
    
    if [ ! -f "$PROJECT_ROOT/.env" ]; then
        log_error "Fichier .env manquant. Copiez .env.example vers .env"
        exit 1
    fi
    
    if [ ! -f "$PROJECT_ROOT/docker-compose.yml" ]; then
        log_error "Fichier docker-compose.yml manquant"
        exit 1
    fi
    
    log_info "‚úÖ Pr√©requis valid√©s"
}

# Cr√©ation des r√©pertoires
create_directories() {
    log_step "Cr√©ation des r√©pertoires de donn√©es..."
    
    mkdir -p "$MATRIX_DATA"/{media_store,uploads}
    mkdir -p "$PROJECT_ROOT/data/postgres"
    mkdir -p "$PROJECT_ROOT/security/ssl"
    
    # Permissions appropri√©es
    chmod 755 "$MATRIX_DATA"
    chmod 755 "$MATRIX_DATA"/{media_store,uploads}
    
    log_info "‚úÖ R√©pertoires cr√©√©s"
}

# G√©n√©ration des certificats SSL
generate_ssl_certs() {
    log_step "V√©rification des certificats SSL..."
    
    local ssl_dir="$PROJECT_ROOT/security/ssl"
    local cert_file="$ssl_dir/dip.crt"
    local key_file="$ssl_dir/dip.key"
    
    if [ ! -f "$cert_file" ] || [ ! -f "$key_file" ]; then
        log_info "G√©n√©ration des certificats SSL..."
        
        # Cr√©er le script de g√©n√©ration s'il n'existe pas
        if [ ! -f "$ssl_dir/generate-certs.sh" ]; then
            cat > "$ssl_dir/generate-certs.sh" << 'EOF'
#!/bin/bash
DOMAIN="dip.local"
CERT_DIR="$(dirname "$0")"

openssl genrsa -out "$CERT_DIR/dip.key" 2048
openssl req -new -x509 -key "$CERT_DIR/dip.key" -out "$CERT_DIR/dip.crt" -days 365 \
    -subj "/C=FR/ST=IDF/L=Paris/O=D.I.P./CN=$DOMAIN"

chmod 600 "$CERT_DIR/dip.key"
chmod 644 "$CERT_DIR/dip.crt"

echo "‚úÖ Certificats SSL g√©n√©r√©s"
EOF
            chmod +x "$ssl_dir/generate-certs.sh"
        fi
        
        # Ex√©cuter la g√©n√©ration
        cd "$ssl_dir" && bash generate-certs.sh
        log_info "‚úÖ Certificats SSL g√©n√©r√©s"
    else
        log_info "‚úÖ Certificats SSL existants"
    fi
}

# Configuration Matrix avec auto-g√©n√©ration des cl√©s
setup_matrix_config() {
    log_step "Configuration de Matrix Synapse..."
    
    # Le homeserver.yaml doit √™tre pr√©sent
    if [ ! -f "$PROJECT_ROOT/services/matrix/homeserver.yaml" ]; then
        log_error "Configuration homeserver.yaml manquante dans services/matrix/"
        exit 1
    fi
    
    log_info "‚úÖ Configuration Matrix valid√©e"
}

# Test de configuration
test_configuration() {
    log_step "D√©marrage et test des services..."
    
    cd "$PROJECT_ROOT"
    
    # D√©marrer PostgreSQL
    log_info "D√©marrage de PostgreSQL..."
    $COMPOSE_CMD up -d postgres
    
    # Attendre PostgreSQL
    log_info "Attente de PostgreSQL..."
    for i in {1..30}; do
        if $COMPOSE_CMD exec -T postgres pg_isready -U synapse >/dev/null 2>&1; then
            break
        fi
        sleep 2
        echo -n "."
    done
    echo
    log_info "‚úÖ PostgreSQL op√©rationnel"
    
    # D√©marrer Matrix (avec auto-g√©n√©ration des cl√©s)
    log_info "D√©marrage de Matrix Synapse..."
    $COMPOSE_CMD up -d matrix-synapse
    
    # Attendre Matrix
    log_info "Attente de Matrix Synapse..."
    for i in {1..60}; do
        if curl -sf http://localhost:8008/health >/dev/null 2>&1; then
            break
        fi
        sleep 2
        echo -n "."
    done
    echo
    
    if curl -sf http://localhost:8008/_matrix/client/versions >/dev/null 2>&1; then
        log_info "‚úÖ Matrix Synapse op√©rationnel"
        
        # V√©rifier que la cl√© a √©t√© g√©n√©r√©e
        if $COMPOSE_CMD exec -T synapse test -f /data/homeserver.signing.key; then
            log_info "‚úÖ Cl√© de signature g√©n√©r√©e automatiquement"
        fi
    else
        log_error "‚ùå Probl√®me avec Matrix Synapse"
        $COMPOSE_CMD logs matrix-synapse | tail -20
        exit 1
    fi
    
    # D√©marrer Nginx
    log_info "D√©marrage du reverse proxy..."
    $COMPOSE_CMD up -d nginx
    
    # Test final HTTPS
    sleep 5
    if curl -sk https://localhost/_matrix/client/versions >/dev/null 2>&1; then
        log_info "‚úÖ Interface HTTPS op√©rationnelle"
    else
        log_warn "‚ö†Ô∏è  Interface HTTPS ne r√©pond pas encore"
    fi
}

# Cr√©ation du premier administrateur
create_admin_user() {
    log_step "Cr√©ation de l'utilisateur administrateur..."
    
    echo ""
    echo "üìù Cr√©ation du compte administrateur D.I.P."
    echo "   Nom d'utilisateur recommand√©: admin"
    echo "   Mot de passe: [choisir un mot de passe fort]"
    echo "   Admin: r√©pondez 'y' pour les privil√®ges admin"
    echo ""
    
    cd "$PROJECT_ROOT"
    
    if $COMPOSE_CMD exec -it synapse register_new_matrix_user \
        -c /data/homeserver.yaml \
        -a http://localhost:8008; then
        log_info "‚úÖ Utilisateur admin cr√©√© avec succ√®s"
    else
        log_error "‚ùå Erreur lors de la cr√©ation de l'utilisateur"
        return 1
    fi
}

# Configuration des salons par d√©faut
setup_default_rooms() {
    log_step "Information sur les salons par d√©faut..."
    
    echo ""
    echo "üìã Salons recommand√©s √† cr√©er via l'interface web:"
    echo "   - #general:dip.local (public, discussions g√©n√©rales)"
    echo "   - #annonces:dip.local (admins seulement, annonces)"
    echo "   - #support:dip.local (public, support technique)"
    echo "   - #urgence:dip.local (alertes d'urgence)"
    echo ""
    echo "üåê Acc√®s: https://localhost"
}

# Menu principal
main() {
    echo "üõ°Ô∏è Configuration Matrix Synapse - Mission D.I.P."
    echo "================================================="
    
    check_requirements
    create_directories
    generate_ssl_certs
    setup_matrix_config
    test_configuration
    
    echo ""
    echo "‚úÖ Matrix Synapse d√©ploy√© avec succ√®s!"
    echo ""
    echo "üåê Acc√®s aux services:"
    echo "   - Interface D.I.P.: https://localhost"
    echo "   - API Matrix: https://localhost/_matrix"
    echo "   - Element int√©gr√©: https://localhost/element"
    echo ""
    
    read -p "Cr√©er un utilisateur administrateur maintenant? [y/N]: " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        create_admin_user
    else
        echo "‚ö†Ô∏è  Vous pourrez cr√©er l'admin plus tard avec:"
        echo "   $COMPOSE_CMD exec -it synapse register_new_matrix_user -c /data/homeserver.yaml -a http://localhost:8008"
    fi
    
    setup_default_rooms
    
    echo ""
    echo "üéØ Mission accomplie! La r√©sistance peut maintenant communiquer de mani√®re s√©curis√©e."
    echo ""
    echo "üìö Documentation: docs/users/matrix-guide.md"
}

# Ex√©cution si script appel√© directement
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi